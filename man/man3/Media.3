.TH "Media" 3 "Fri Aug 5 2011" "Version 1.0" "Launchpad" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Media \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBDatabaseObject\fP.
.PP
Inherited by \fBImage\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBattach_file\fP ($file)"
.br
.ti -1c
.RI "\fBsave\fP ()"
.br
.ti -1c
.RI "\fBdestroy\fP ()"
.br
.ti -1c
.RI "\fBforce_mimetype\fP ()"
.br
.ti -1c
.RI "\fBauthor\fP ()"
.br
.ti -1c
.RI "\fBfile_path\fP ()"
.br
.ti -1c
.RI "\fBname_of_file\fP ()"
.br
.ti -1c
.RI "\fBsimple_type\fP ()"
.br
.ti -1c
.RI "\fBsize_as_text\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBextension\fP ($filename)"
.br
.ti -1c
.RI "static \fBfind_last_created\fP ($limit=1)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fB$id\fP"
.br
.ti -1c
.RI "\fB$filename\fP"
.br
.ti -1c
.RI "\fB$type\fP"
.br
.ti -1c
.RI "\fB$size\fP"
.br
.ti -1c
.RI "\fB$caption\fP"
.br
.ti -1c
.RI "\fB$description\fP"
.br
.ti -1c
.RI "\fB$author_id\fP"
.br
.ti -1c
.RI "\fB$errors\fP = array()"
.br
.ti -1c
.RI "\fB$upload_errors\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static \fB$table_name\fP = 'media'"
.br
.ti -1c
.RI "static \fB$db_fields\fP = array( 'id', 'filename', 'type', 'size', 'caption', 'description', 'author_id')"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "Media::attach_file ($file)"Sets \fBImage\fP attributes. Useage: attach_file( $_FILE['uploaded_file'] );
.PP
\fBParameters:\fP
.RS 4
\fI$file\fP - An associative array of items uploaded to the current script via the HTTP POST method 
.RE
.PP
\fBReturns:\fP
.RS 4
boolean 
.RE
.PP

.PP
Reimplemented in \fBImage\fP.
.SS "Media::author ()"Reurns author of media by author_id 
.PP
\fBReturns:\fP
.RS 4
\fBUser\fP 
.RE
.PP

.SS "Media::destroy ()"Removes DB entry and file on server. 
.PP
\fBReturns:\fP
.RS 4
boolean 
.RE
.PP

.SS "static Media::extension ($filename)\fC [static]\fP"Returns returns the extension type of media. 
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.SS "Media::file_path ()"Returns the file path of the media file. 
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.SS "static Media::find_last_created ($limit = \fC1\fP)\fC [static]\fP"Returns last created media 
.PP
\fBParameters:\fP
.RS 4
\fI$limit\fP = 1 - Specifies the amount of media files to return 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBMedia\fP 
.RE
.PP

.SS "Media::force_mimetype ()"Guesses the content type of a file by looking for certain magic byte sequences at specific positions within the file. If Magic File isn't available mime is guessed based on the file extention
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.SS "Media::name_of_file ()"Returns the base name of the file without directories. 
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.SS "Media::save ()"Saves image 
.PP
\fBReturns:\fP
.RS 4
boolean 
.RE
.PP

.PP
Reimplemented from \fBDatabaseObject\fP.
.SS "Media::simple_type ()"Returns the type of media 
.PP
\fBReturns:\fP
.RS 4
string eg: image, video, audio, text 
.RE
.PP

.SS "Media::size_as_text ()"Returns the size of the file as string. 
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "Media::$upload_errors"\fBInitial value:\fP
.PP
.nf
 array(
                UPLOAD_ERR_OK                   => 'No errors',
                UPLOAD_ERR_INI_SIZE     => 'Larger than upload_max_filesize',
                UPLOAD_ERR_FORM_SIZE    => 'Larger than MAX_FILE_SIZE',
                UPLOAD_ERR_PARTIAL              => 'Partial upload',
                UPLOAD_ERR_NO_FILE              => 'No file',
                UPLOAD_ERR_NO_TMP_DIR   => 'No temporary directory',
                UPLOAD_ERR_CANT_WRITE   => 'Can't write to disk',
                UPLOAD_ERR_EXTENSION    => 'File upload stopped by extension'
        )
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Launchpad from the source code.
